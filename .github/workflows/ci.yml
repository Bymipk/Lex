name: Node.js CI

on:
  push:
    branches:
      - master
      - 'patch/*'   # Triggers on any push to a branch that starts with "patch/"
      - 'feature/*' # Triggers on any push to a branch that starts with "feature/"
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16, 18, 20]  # Test against multiple Node.js versions

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Lint code
        run: npm run lint  # Ensure a 'lint' script is defined in your package.json

      - name: Run tests
        run: npm test  # Ensure a 'test' script is defined in your package.json

      - name: Build application
        run: npm run build  # If applicable, ensure a 'build' script is defined in your package.json

      - name: Determine new version and update package.json
        id: version
        run: |
          # Get the current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Use semver to bump the version (patch in this case)
          NEW_VERSION=$(npm version patch --no-git-tag-version)
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_ENV
          
          # Commit the version bump
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add package.json
          git commit -m "Bump version to $NEW_VERSION"
          
          # Push the changes to the branch
          git push origin HEAD
          
      - name: Create and push version tag
        if: ${{ startsWith(github.ref, 'refs/heads/patch/') || startsWith(github.ref, 'refs/heads/feature/') || github.ref == 'refs/heads/master' }}
        run: |
          # Create a new Git tag for the version update
          NEW_TAG=$(node -p "require('./package.json').version")
          git tag "v$NEW_TAG"
          git push origin "v$NEW_TAG"
